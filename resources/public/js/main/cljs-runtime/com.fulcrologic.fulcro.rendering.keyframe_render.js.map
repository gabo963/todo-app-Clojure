{"version":3,"sources":["com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],"mappings":"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","names":["com.fulcrologic.fulcro.rendering.keyframe-render/render-state!","app","state-map","com.fulcrologic.fulcro.components/enable-forced-refresh!","*app*-orig-val__59286","*shared*-orig-val__59287","*app*-temp-val__59288","*shared*-temp-val__59289","com.fulcrologic.fulcro.components/*app*","com.fulcrologic.fulcro.components/*shared*","com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1","map__59290","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__59291","cljs.core/deref","runtime-atom","root-factory","root-class","mount-node","r!","or__4131__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","js/module$node_modules$react_dom$index.render","query","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","and__4120__auto__","G__59297","G__59298","p__59303","map__59305","com.fulcrologic.fulcro.rendering.keyframe-render/render!","force-root?","hydrate?","map__59308","map__59309","state-atom","js/module$node_modules$react_dom$index.hydrate","app-root","*app*-orig-val__59312","*parent*-orig-val__59313","*shared*-orig-val__59314","*app*-temp-val__59315","*parent*-temp-val__59316","*shared*-temp-val__59317","com.fulcrologic.fulcro.components/*parent*","G__59320","G__59321","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.fulcro.rendering.keyframe-render\n  \"The keyframe optimized render.\"\n  (:require\n    #?(:cljs\n       [\"react-dom\" :as react.dom])\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.raw.application :as rapp]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.components :as comp]\n    [taoensso.timbre :as log]))\n\n(defn render-state!\n  \"This function renders given state map over top of the current app. This allows you to render previews of state **without\n  actually changing the app state**. Used by Inspect for DOM preview. Forces a root-based render with no props diff optimization.\n  The app must already be mounted. Returns the result of render.\"\n  [app state-map]\n  (comp/enable-forced-refresh! 1000)\n  (binding [comp/*app*    app\n            comp/*shared* (comp/shared app)]\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n          r!        (or (ah/app-algorithm app :render-root!) #?(:cljs react.dom/render))\n          query     (comp/get-query root-class state-map)\n          data-tree (if query\n                      (fdn/db->tree query state-map state-map)\n                      state-map)]\n      (when (and r! root-factory)\n        (r! (root-factory data-tree) mount-node)))))\n\n(defn render!\n  \"Render the UI. The keyframe render runs a full UI query and then asks React to render the root component.\n  The optimizations for this kind of render are purely those provided by `defsc`'s default\n  shouldComponentUpdate, which causes component to act like React PureComponent (though the props compare in cljs\n  is often faster).\n\n  If `:hydrate?` is true it will use the React hydrate functionality (on browsers) to render over\n  server-rendered content in the DOM.\n\n  If `:force-root? true` is included in the options map then not only will this do a keyframe update, it will also\n  force all components to return `true` from `shouldComponentUpdate`.\"\n  [app {:keys [force-root? hydrate?]}]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n        r!               (if hydrate?\n                           (or (ah/app-algorithm app :hydrate-root!) #?(:cljs react.dom/hydrate) #?(:cljs react.dom/render))\n                           (or (ah/app-algorithm app :render-root!) #?(:cljs react.dom/render)))\n        state-map        @state-atom\n        query            (comp/get-query root-class state-map)\n        data-tree        (if query\n                           (fdn/db->tree query state-map state-map)\n                           state-map)\n        app-root #?(:clj {}\n                    :cljs (when root-factory\n                            (when force-root? (comp/enable-forced-refresh! 1000))\n                            (binding [comp/*app*    app\n                                      comp/*parent* nil\n                                      comp/*shared* (comp/shared app)]\n                              (r! (root-factory data-tree) mount-node))))]\n    (swap! runtime-atom assoc :com.fulcrologic.fulcro.application/app-root app-root)\n    #?(:cljs app-root)))\n"]}