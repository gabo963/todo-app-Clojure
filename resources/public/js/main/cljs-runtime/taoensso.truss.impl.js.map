{"version":3,"sources":["taoensso/truss/impl.cljc"],"mappings":"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","names":["taoensso.truss.impl/rsome","pred","coll","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","in","temp__5804__auto__","p","cljs.core/reduced","taoensso.truss.impl/revery?","taoensso.truss.impl/revery","taoensso.truss.impl/some?","x","taoensso.truss.impl/ensure-set","cljs.core/set?","cljs.core/set","ensure-set","taoensso.truss.impl/ks=","ks","m","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","taoensso.truss.impl/ks<=","clojure.set/subset?","taoensso.truss.impl/ks>=","clojure.set/superset?","taoensso.truss.impl/ks-nnil?","p1__38907#","cljs.core.get.cljs$core$IFn$_invoke$arity$2","taoensso.truss.impl/default-error-fn","data_","cljs.core/deref","data","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","taoensso.truss.impl/*data*","taoensso.truss.impl/*error-fn*","taoensso.truss.impl/safe","e38912","js/Error","_","taoensso.truss.impl/safe?","env","or__4131__auto__","cljs.core/Keyword","cljs.core/map?","cljs.core/Symbol","temp__5802__auto__","v","cljs.core/contains?","cljs.core/nil?","cljs.core/string?","cljs.core/integer?","cljs.core/number?","cljs.core/symbol?","cljs.core/keyword?","cljs.core/float?","cljs.core/vector?","cljs.core/coll?","cljs.core/list?","cljs.core/ifn?","cljs.core/fn?","cljs.core/associative?","cljs.core/sequential?","cljs.core/delay?","cljs.core/sorted?","cljs.core/counted?","cljs.core/reversible?","cljs.core/true?","cljs.core/false?","cljs.core/identity","cljs.core/not","cljs.core/boolean","taoensso.truss.impl/xpred","vec__38927","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","type","a1","a2","a3","G__38930","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","vec__38956","vec__38959","vec__38962","vec__38965","self","?pred","sf-a1?","sf-a2?","sf-a3?","sf-a1","sf-a2","sf-a3","sf-comp?","and__4120__auto__","G__38980","taoensso.truss.impl/error-message","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","taoensso.truss.impl/WrappedError","taoensso.truss.impl/->WrappedError","val","taoensso.truss.impl/-assertion-error","msg","taoensso.truss.impl/-dummy-error","taoensso.truss.impl/-invar-violation!","elidable?","ns-sym","?line","arg","?err","?data-fn","error-fn","G__39002","cljs.core/Delay","instant","js/Date","undefn-arg?","arg-val","arg-type","cljs.core/type","msg_","err","err-msg","?data","dynamic","data-fn","e39008","e","output","cljs.core/*assert*","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","taoensso.truss.impl/ns-sym","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/*ns*"],"sourcesContent":["(ns taoensso.truss.impl\n  \"Private implementation details.\"\n  (:refer-clojure :exclude [some?])\n  (:require\n   [clojure.set :as set]\n   ;; #?(:cljs [cljs.analyzer])\n   )\n  #?(:cljs\n     (:require-macros\n      [taoensso.truss.impl\n       :refer [compile-if catching -invar]])))\n\n(comment (require '[taoensso.encore :as enc]))\n\n;;;; TODO\n;; - Namespaced kw registry like clojure.spec, (truss/def <kw> <pred>)?\n;; - Ideas for easier sharing of composed preds?\n\n;;;; Manual Encore imports\n;; A bit of a nuisance but:\n;;   - Allows Encore to depend on Truss (esp. nb for back-compatibility wrappers).\n;;   - Allows Truss to be entirely dependency free.\n\n#?(:clj (defmacro if-cljs [then else] (if (:ns &env) then else)))\n#?(:clj\n   (defmacro compile-if [test then else]\n     (if (try (eval test) (catch Throwable _ false))\n       `(do ~then)\n       `(do ~else))))\n\n#?(:clj\n   (defmacro catching \"Cross-platform try/catch/finally.\"\n     ;; We badly need something like http://dev.clojure.org/jira/browse/CLJ-1293\n     ;; TODO js/Error instead of :default as temp workaround for http://goo.gl/UW7773\n     ([try-expr                     ] `(catching ~try-expr ~'_ nil))\n     ([try-expr error-sym catch-expr]\n      `(if-cljs\n         (try ~try-expr (catch js/Error  ~error-sym ~catch-expr))\n         (try ~try-expr (catch Throwable ~error-sym ~catch-expr))))\n     ([try-expr error-sym catch-expr finally-expr]\n      `(if-cljs\n         (try ~try-expr (catch js/Error  ~error-sym ~catch-expr) (finally ~finally-expr))\n         (try ~try-expr (catch Throwable ~error-sym ~catch-expr) (finally ~finally-expr))))))\n\n(defn rsome   [pred coll]       (reduce (fn [acc in] (when-let [p (pred in)] (reduced p))) nil coll))\n(defn revery? [pred coll]       (reduce (fn [acc in] (if (pred in) true (reduced nil))) true coll))\n(defn revery  [pred coll] (when (reduce (fn [acc in] (if (pred in) true (reduced nil))) true coll) coll))\n\n(comment (revery integer? [1 2 3]) (revery integer? nil))\n\n#?(:cljs (defn ^boolean some? [x] (if (nil? x) false true))\n   :clj\n   (defn some?\n     {:inline (fn [x] `(if (identical? ~x nil) false true))}\n     [x] (if (identical? x nil) false true)))\n\n(defn ensure-set [x] (if (set? x) x (set x)))\n(let [ensure-set ensure-set]\n  (defn #?(:clj ks=      :cljs ^boolean ks=)      [ks m] (=             (set (keys m)) (ensure-set ks)))\n  (defn #?(:clj ks<=     :cljs ^boolean ks<=)     [ks m] (set/subset?   (set (keys m)) (ensure-set ks)))\n  (defn #?(:clj ks>=     :cljs ^boolean ks>=)     [ks m] (set/superset? (set (keys m)) (ensure-set ks)))\n  (defn #?(:clj ks-nnil? :cljs ^boolean ks-nnil?) [ks m] (revery?     #(some? (get m %))           ks)))\n\n;;;; Truss\n\n(defn default-error-fn [data_]\n  (let [data @data_]\n    (throw (ex-info @(:msg_ data) (dissoc data :msg_)))))\n\n(def ^:dynamic *data* nil)\n(def ^:dynamic *error-fn* default-error-fn)\n\n(defn  safe [pred] (fn [x] (catching (pred x))))\n(defn- safe?\n  \"[Optimization] Returns true for common preds that are naturally non-throwing.\"\n  [env p]\n  (or\n    (keyword? p)\n    (map?     p)\n    (set?     p)\n    (let [p\n          (if (symbol? p)\n            (if-let [v #?(:clj        (resolve                       p)\n                          :cljs nil #_(cljs.analyzer/resolve-var env p))]\n              @v p)\n            p)]\n\n      (contains?\n        #{nil? #_some? string? integer? number? symbol? keyword? float?\n          set? vector? coll? list? ifn? fn? associative? sequential? delay?\n          sorted? counted? reversible? true? false? identity not boolean}\n        p))))\n\n(comment (safe? nil 'nil?))\n\n(defn- xpred\n  \"Expands any special predicate forms and returns [<expanded-pred> <safe?>].\"\n  [env pred]\n  (if-not (vector? pred)\n    [pred (safe? env pred)]\n    (let [[type a1 a2 a3] pred]\n      (assert a1 \"Special predicate [<special-type> <arg>] form w/o <arg>\")\n      (case type\n        :set=             [`(fn [~'x] (=             (ensure-set ~'x) (ensure-set ~a1))) false]\n        :set<=            [`(fn [~'x] (set/subset?   (ensure-set ~'x) (ensure-set ~a1))) false]\n        :set>=            [`(fn [~'x] (set/superset? (ensure-set ~'x) (ensure-set ~a1))) false]\n        :ks=              [`(fn [~'x] (ks=      ~a1 ~'x)) false]\n        :ks<=             [`(fn [~'x] (ks<=     ~a1 ~'x)) false]\n        :ks>=             [`(fn [~'x] (ks>=     ~a1 ~'x)) false]\n        :ks-nnil?         [`(fn [~'x] (ks-nnil? ~a1 ~'x)) false]\n        (    :el     :in) [`(fn [~'x]      (contains? (ensure-set ~a1) ~'x))  false]\n        (:not-el :not-in) [`(fn [~'x] (not (contains? (ensure-set ~a1) ~'x))) false]\n\n        :n=               [`(fn [~'x] (=  (count ~'x) ~a1)) false]\n        :n>=              [`(fn [~'x] (>= (count ~'x) ~a1)) false]\n        :n<=              [`(fn [~'x] (<= (count ~'x) ~a1)) false]\n\n        ;; Pred composition\n        (let [self (fn [?pred] (when ?pred (xpred env ?pred)))\n\n              ;; Support recursive expansion:\n              [[a1 sf-a1?] [a2 sf-a2?] [a3 sf-a3?]] [(self a1) (self a2) (self a3)]\n\n              sf-a1    (when a1 (if sf-a1? a1 `(safe ~a1)))\n              sf-a2    (when a2 (if sf-a2? a2 `(safe ~a2)))\n              sf-a3    (when a3 (if sf-a3? a3 `(safe ~a3)))\n              sf-comp? (cond a3 (and sf-a1? sf-a2? sf-a3?)\n                             a2 (and sf-a1? sf-a2?)\n                             a1 sf-a1?)]\n\n          (case type\n            :and ; all-of\n            (cond\n              a3 [`(fn [~'x] (and (~a1 ~'x) (~a2 ~'x) (~a3 ~'x))) sf-comp?]\n              a2 [`(fn [~'x] (and (~a1 ~'x) (~a2 ~'x))) sf-comp?]\n              a1 [a1 sf-a1?])\n\n            :or  ; any-of\n            (cond\n              a3 [`(fn [~'x] (or (~sf-a1 ~'x) (~sf-a2 ~'x) (~sf-a3 ~'x))) true]\n              a2 [`(fn [~'x] (or (~sf-a1 ~'x) (~sf-a2 ~'x))) true]\n              a1 [a1 sf-a1?])\n\n            :not ; complement/none-of\n            ;; Note that it's a little ambiguous whether we'd want\n            ;; safe (non-throwing) behaviour here or not so choosing\n            ;; to interpret throws as undefined to minimize surprise\n            (cond\n              a3 [`(fn [~'x] (not (or (~a1 ~'x) (~a2 ~'x) (~a3 ~'x)))) sf-comp?]\n              a2 [`(fn [~'x] (not (or (~a1 ~'x) (~a2 ~'x)))) sf-comp?]\n              a1 [`(fn [~'x] (not     (~a1 ~'x))) sf-a1?])))))))\n\n(comment\n  (xpred nil string?)\n  (xpred nil [:or string? integer? :foo]) ; t\n  (xpred nil [:or string? integer? seq])  ; f\n  (xpred nil [:or string? integer? [:and number? integer?]]) ; t\n  (xpred nil [:or string? integer? [:and number? pos?]])     ; f\n  )\n\n;; #?(:clj\n;;    (defn- fast-pr-str\n;;      \"Combination `with-out-str`, `pr`. Ignores *print-dup*.\"\n;;      [x]\n;;      (let [w (java.io.StringWriter.)]\n;;        (print-method x w)\n;;        (.toString      w))))\n\n;; (comment (enc/qb 1e5 (pr-str {:a :A}) (fast-pr-str {:a :A})))\n\n(defn- error-message\n  ;; Temporary, to support Clojure 1.9\n  ;; Clojure 1.10+ now has `ex-message`\n  [x]\n  #?(:clj  (when (instance? Throwable x) (.getMessage ^Throwable x))\n     :cljs (when (instance? js/Error  x) (.-message              x))))\n\n(deftype WrappedError [val])\n(defn -assertion-error [msg] #?(:clj (AssertionError. msg) :cljs (js/Error. msg)))\n(def  -dummy-error #?(:clj (Object.) :cljs (js-obj)))\n(defn -invar-violation!\n  ;; - http://dev.clojure.org/jira/browse/CLJ-865 would be handy for line numbers.\n  [elidable? ns-sym ?line pred arg ?err ?data-fn]\n  (when-let [error-fn *error-fn*]\n    (error-fn ; Nb consumer must deref while bindings are still active\n     (delay\n      (let [instant     #?(:clj (java.util.Date.) :cljs (js/Date.))\n            undefn-arg? (instance? WrappedError arg)\n            arg-val     (if undefn-arg? 'truss/undefined-arg       arg)\n            arg-type    (if undefn-arg? 'truss/undefined-arg (type arg))\n\n            ;; arg-str\n            ;; (cond\n            ;;   undefn-arg? \"<truss/undefined-arg>\"\n            ;;   (nil? arg)  \"<truss/nil>\"\n            ;;   :else\n            ;;   (binding [*print-readably* false\n            ;;             *print-length*   3]\n            ;;     #?(:clj  (fast-pr-str arg)\n            ;;        :cljs (pr-str      arg))))\n\n            ?err\n            (cond\n              (identical? -dummy-error ?err) nil\n              (instance?  WrappedError ?err)\n              (.-val     ^WrappedError ?err)\n              :else                    ?err)\n\n            msg_\n            (delay\n              (let [msg (str \"Invariant failed at \" ns-sym (when ?line (str \"|\" ?line)) \": \"\n                          (list pred arg-val))]\n\n                (if-let [err ?err]\n                  (let [err-msg #_(ex-message err) (error-message err)]\n                    (if undefn-arg?\n                      (str msg \"\\r\\n\\r\\nError evaluating arg: \"  err-msg)\n                      (str msg \"\\r\\n\\r\\nError evaluating pred: \" err-msg)))\n                  msg)))\n\n            ?data\n            (let [dynamic *data*\n                  arg\n                  (when-let [data-fn ?data-fn]\n                    (catching (data-fn) e\n                      {:truss/error e}))]\n\n              (when (or   dynamic      arg)\n                {:dynamic dynamic :arg arg}))\n\n            output\n            {:msg_  msg_\n             :dt    instant\n             :pred  pred\n             :arg   {:value arg-val\n                     :type  arg-type}\n\n             :loc {:ns ns-sym :line ?line}\n             :env {:elidable?  elidable?\n                   :*assert*   *assert*}}\n\n            output (if-let [v ?data] (assoc output :data v) output)\n            output (if-let [v ?err]  (assoc output :err  v) output)]\n\n        output)))))\n\n(defn- ns-sym [] (symbol (str *ns*)))\n\n#?(:clj\n   (defn const-form? \"See issue #12\" [x]\n     (not (or (list? x) (instance? clojure.lang.Cons x)))))\n\n#?(:clj\n   (defmacro -invar\n     \"Written to maximize performance + minimize post Closure+gzip Cljs code size.\"\n     [elidable? truthy? line pred x ?data-fn]\n     (let [const-x? (const-form? x) ; Common case\n           [pred* safe-pred?] (xpred #?(:clj nil :cljs &env) pred)]\n\n       (if const-x? ; Common case\n         (if safe-pred? ; Common case\n           `(if (~pred* ~x)\n              ~(if truthy? true x)\n              (-invar-violation! ~elidable? '~(ns-sym) ~line '~pred ~x nil ~?data-fn))\n\n           `(let [~'e (catching (if (~pred* ~x) nil -dummy-error) ~'e ~'e)]\n              (if (nil? ~'e)\n                ~(if truthy? true x)\n                (-invar-violation! ~elidable? '~(ns-sym) ~line '~pred ~x ~'e ~?data-fn))))\n\n         (if safe-pred?\n           `(let [~'z (catching ~x ~'e (WrappedError. ~'e))\n                  ~'e (if (instance? WrappedError ~'z)\n                        ~'z\n                        (if (~pred* ~'z) nil -dummy-error))]\n\n              (if (nil? ~'e)\n                ~(if truthy? true 'z)\n                (-invar-violation! ~elidable? '~(ns-sym) ~line '~pred ~'z ~'e ~?data-fn)))\n\n           `(let [~'z (catching ~x ~'e (WrappedError. ~'e))\n                  ~'e (catching\n                        (if (instance? WrappedError ~'z)\n                          ~'z\n                          (if (~pred* ~'z) nil -dummy-error)) ~'e ~'e)]\n\n              (if (nil? ~'e)\n                ~(if truthy? true 'z)\n                (-invar-violation! ~elidable? '~(ns-sym) ~line '~pred ~'z ~'e ~?data-fn))))))))\n\n(comment\n  (macroexpand '(-invar true false 1      string?    \"foo\"             nil)) ; Type 0\n  (macroexpand '(-invar true false 1 [:or string?]   \"foo\"             nil)) ; Type 0\n  (macroexpand '(-invar true false 1    #(string? %) \"foo\"             nil)) ; Type 1\n  (macroexpand '(-invar true false 1      string?    (str \"foo\" \"bar\") nil)) ; Type 2\n  (macroexpand '(-invar true false 1    #(string? %) (str \"foo\" \"bar\") nil)) ; Type 3\n  (enc/qb 1e6\n    (string? \"foo\")                                          ; Baseline\n    (-invar true false 1   string?    \"foo\"             nil) ; Type 0\n    (-invar true false 1 #(string? %) \"foo\"             nil) ; Type 1\n    (-invar true false 1   string?    (str \"foo\" \"bar\") nil) ; Type 2\n    (-invar true false 1 #(string? %) (str \"foo\" \"bar\") nil) ; Type 3\n    (try\n      (string? (try \"foo\" (catch Throwable _ nil)))\n      (catch Throwable _ nil)))\n  ;; [41.86 50.43 59.56 171.12 151.2 42.0]\n\n  (-invar false false 1 integer? \"foo\"   nil) ; Pred failure example\n  (-invar false false 1 zero?    \"foo\"   nil) ; Pred error example\n  (-invar false false 1 zero?    (/ 5 0) nil) ; Form error example\n  )\n\n#?(:clj\n   (defmacro -invariant [elidable? truthy? line args]\n     (let [bang?      (= (first args) :!) ; For back compatibility, undocumented\n           elidable?  (and elidable? (not bang?))\n           elide?     (and elidable? (not *assert*))\n           args       (if bang? (next args) args)\n           in?        (= (second args) :in) ; (have pred :in xs1 xs2 ...)\n           args       (if in? (cons (first args) (nnext args)) args)\n\n           data?      (and (> (count args) 2) ; Distinguish from `:data` pred\n                           (= (last (butlast args)) :data))\n           ?data-fn   (when data? `(fn [] ~(last args)))\n           args       (if data? (butlast (butlast args)) args)\n\n           auto-pred? (= (count args) 1) ; Unique common case: (have ?x)\n           pred       (if auto-pred? 'taoensso.truss.impl/some? (first args))\n           [?x1 ?xs]  (if auto-pred?\n                        [(first args) nil]\n                        (if (nnext args) [nil (next args)] [(second args) nil]))\n           single-x?  (nil? ?xs)\n           in-fn\n           `(fn [~'__in] ; Will (necessarily) lose exact form\n              (-invar ~elidable? ~truthy? ~line ~pred ~'__in ~?data-fn))]\n\n       (if elide?\n         (if truthy?\n           true\n           (if single-x? ?x1 (vec ?xs)))\n\n         (if-not in?\n\n           (if single-x?\n             ;; (have pred x) -> x\n             `(-invar ~elidable? ~truthy? ~line ~pred ~?x1 ~?data-fn)\n\n             ;; (have pred x1 x2 ...) -> [x1 x2 ...]\n             (if truthy?\n               `(do ~@(mapv (fn [x] `(-invar ~elidable? ~truthy? ~line ~pred ~x ~?data-fn)) ?xs) true)\n               (do    (mapv (fn [x] `(-invar ~elidable? ~truthy? ~line ~pred ~x ~?data-fn)) ?xs))))\n\n           (if single-x?\n\n             ;; (have? pred :in xs) -> bool\n             ;; (have  pred :in xs) -> xs\n             (if truthy?\n               `(taoensso.truss.impl/revery? ~in-fn ~?x1)\n               `(taoensso.truss.impl/revery  ~in-fn ~?x1))\n\n             ;; (have? pred :in xs1 xs2 ...) -> [bool1 ...]\n             ;; (have  pred :in xs1 xs2 ...) -> [xs1   ...]\n             (if truthy?\n               `(do ~@(mapv (fn [xs] `(taoensso.truss.impl/revery? ~in-fn ~xs)) ?xs) true)\n               (do    (mapv (fn [xs] `(taoensso.truss.impl/revery  ~in-fn ~xs)) ?xs)))))))))\n"]}