{"version":3,"sources":["cognitect/transit.cljs"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","cljs.core/UUID","this","other","com.cognitect.transit.types/UUID","cljs.core/compare","js/Error","js/goog.math.Long","com.cognitect.transit.types/TaggedValue","com.cognitect.transit.eq/hashCode","cljs.core/hash","uuid","writer","_","cljs.core/-write","cognitect.transit/opts-merge","a","b","seq__39298","cljs.core/seq","chunk__39299","count__39300","i__39301","temp__5804__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","cljs.core/js-keys","v","goog.object/get","goog.object/set","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cognitect.transit/MapBuilder","cognitect.transit/->MapBuilder","node","cljs.core/transient","m","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/persistent!","arr","cljs.core/PersistentArrayMap","cognitect.transit/VectorBuilder","cognitect.transit/->VectorBuilder","x","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","var_args","G__39339","cognitect.transit/reader","type","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","opts","G__39343","G__39344","com.cognitect.transit/reader","cljs.core/name","cljs.core/clj->js","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","i","ret","cljs.core/with-meta","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","clojure.set/rename-keys","cognitect.transit/read","r","str","cognitect.transit/KeywordHandler","cognitect.transit/->KeywordHandler","cognitect.transit/SymbolHandler","cognitect.transit/->SymbolHandler","cognitect.transit/ListHandler","cognitect.transit/->ListHandler","seq__39380","chunk__39381","count__39382","i__39383","com.cognitect.transit/tagged","cognitect.transit/MapHandler","cognitect.transit/->MapHandler","cognitect.transit/SetHandler","cognitect.transit/->SetHandler","seq__39405","chunk__39406","count__39407","i__39408","cognitect.transit/VectorHandler","cognitect.transit/->VectorHandler","seq__39436","chunk__39437","count__39438","i__39439","cognitect.transit/UUIDHandler","cognitect.transit/->UUIDHandler","cognitect.transit/WithMeta","cognitect.transit/->WithMeta","value","meta","cognitect.transit/WithMetaHandler","cognitect.transit/->WithMetaHandler","G__39468","G__39469","G__39486","cognitect.transit/writer","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","keyword-handler","symbol-handler","list-handler","map-handler","set-handler","vector-handler","uuid-handler","meta-handler","handlers","cljs.core/Keyword","cljs.core/Symbol","cljs.core/Range","cljs.core/List","cljs.core/Cons","cljs.core/EmptyList","cljs.core/LazySeq","cljs.core/RSeq","cljs.core/IndexedSeq","cljs.core/ChunkedCons","cljs.core/ChunkedSeq","cljs.core/PersistentQueueSeq","cljs.core/PersistentQueue","cljs.core/PersistentArrayMapSeq","cljs.core/PersistentTreeMapSeq","cljs.core/NodeSeq","cljs.core/ArrayNodeSeq","cljs.core/KeySeq","cljs.core/ValSeq","cljs.core/PersistentHashMap","cljs.core/PersistentTreeMap","cljs.core/PersistentHashSet","cljs.core/PersistentTreeSet","cljs.core/Subvec","cljs.core/BlackNode","cljs.core/RedNode","js/cljs","js/cljs.core","js/cljs.core.Eduction","cljs.core/Eduction","js/cljs.core.Repeat","cljs.core/Repeat","js/cljs.core.MapEntry","cljs.core/MapEntry","G__39494","G__39495","com.cognitect.transit/writer","kfn","vfn","cljs.core/reduce-kv","obj","G__39499","x39500","cljs.core/clone","coll","f","seq__39501","chunk__39502","count__39503","i__39504","vec__39512","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__39517","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cognitect.transit/write","w","o","cognitect.transit/read-handler","from-rep","cognitect.transit/fn-or-val","cljs.core/fn?","cljs.core/constantly","G__39521","cognitect.transit/write-handler","tag-fn","rep-fn","cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4","str-rep-fn","verbose-handler-fn","js/cognitect","js/cognitect.transit","js/cognitect.transit.t_cognitect$transit39523","cognitect.transit/t_cognitect$transit39523","_39525","meta39524","cognitect.transit/->t_cognitect$transit39523","cognitect.transit/tagged-value","tag","rep","com.cognitect.transit.types/taggedValue","cognitect.transit/tagged-value?","com.cognitect.transit.types/isTaggedValue","cognitect.transit/integer","s","com.cognitect.transit.types/intValue","cognitect.transit/integer?","com.cognitect.transit.types/isInteger","cognitect.transit/bigint","com.cognitect.transit.types/bigInteger","cognitect.transit/bigint?","com.cognitect.transit.types/isBigInteger","cognitect.transit/bigdec","com.cognitect.transit.types/bigDecimalValue","cognitect.transit/bigdec?","com.cognitect.transit.types/isBigDecimal","cognitect.transit/uri","com.cognitect.transit.types/uri","cognitect.transit/uri?","com.cognitect.transit.types/isURI","cognitect.transit/uuid","com.cognitect.transit.types/uuid","cognitect.transit/uuid?","or__4131__auto__","com.cognitect.transit.types/isUUID","cognitect.transit/binary","com.cognitect.transit.types/binary","cognitect.transit/binary?","com.cognitect.transit.types/isBinary","cognitect.transit/quoted","com.cognitect.transit.types/quoted","cognitect.transit/quoted?","com.cognitect.transit.types/isQuoted","cognitect.transit/link","com.cognitect.transit.types/link","cognitect.transit/link?","com.cognitect.transit.types/isLink","cognitect.transit/write-meta"],"sourcesContent":[";; Copyright 2014-2022 Cognitect. All Rights Reserved.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;      http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS-IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n\n(ns cognitect.transit\n  (:refer-clojure :exclude [integer? uuid uuid? uri?])\n  (:require [clojure.set :as set]\n            [com.cognitect.transit :as t]\n            [com.cognitect.transit.types :as ty]\n            [com.cognitect.transit.eq :as eq]\n            [goog.object :as gobj])\n  (:import [goog.math Long]))\n\n;; patch cljs.core/UUID IEquiv\n\n(extend-type UUID\n  IEquiv\n  (-equiv [this other]\n    (cond\n      (instance? UUID other)\n      (identical? (.-uuid this) (.-uuid other))\n\n      (instance? ty/UUID other)\n      (identical? (.-uuid this) (.toString other))\n\n      :else false)))\n\n(extend-protocol IComparable\n  UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other)))))\n  ty/UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(extend-protocol IEquiv\n  Long\n  (-equiv [this other]\n    (.equiv this other))\n\n  ty/UUID\n  (-equiv [this other]\n    (if (instance? UUID other)\n      (-equiv other this)\n      (.equiv this other)))\n\n  ty/TaggedValue\n  (-equiv [this other]\n    (.equiv this other)))\n\n(extend-protocol IHash\n  Long\n  (-hash [this]\n    (eq/hashCode this))\n\n  ty/UUID\n  (-hash [this]\n    (hash (.toString this)))\n\n  ty/TaggedValue\n  (-hash [this]\n    (eq/hashCode this)))\n\n(extend-type ty/UUID\n  IUUID\n  IPrintWithWriter\n  (-pr-writer [uuid writer _]\n    (-write writer (str \"#uuid \\\"\" (.toString uuid) \"\\\"\"))))\n\n(defn ^:no-doc opts-merge [a b]\n  (doseq [k (js-keys b)]\n    (let [v (gobj/get b k)]\n      (gobj/set a k v)))\n  a)\n\n(deftype ^:no-doc MapBuilder []\n  Object\n  (init [_ node] (transient {}))\n  (add [_ m k v node] (assoc! m k v))\n  (finalize [_ m node] (persistent! m))\n  (fromArray [_ arr node] (cljs.core/PersistentArrayMap.fromArray arr true true)))\n\n(deftype ^:no-doc VectorBuilder []\n  Object\n  (init [_ node] (transient []))\n  (add [_ v x node] (conj! v x))\n  (finalize [_ v node] (persistent! v))\n  (fromArray [_ arr node] (cljs.core/PersistentVector.fromArray arr true)))\n\n(defn reader\n  \"Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from string tag to a decoder function of one\n   argument which returns the in-memory representation of the semantic transit\n   value. If a :default handler is provided, it will be used when no matching\n   read handler can be found.\"\n  ([type] (reader type nil))\n  ([type opts]\n     (t/reader (name type)\n       (opts-merge\n         #js {:handlers\n              (clj->js\n                (merge\n                  {\"$\"    (fn [v] (symbol v))\n                   \":\"    (fn [v] (keyword v))\n                   \"set\"  (fn [v] (into #{} v))\n                   \"list\" (fn [v] (into () (.reverse v)))\n                   \"cmap\" (fn [v]\n                            (loop [i 0 ret (transient {})]\n                              (if (< i (alength v))\n                                (recur (+ i 2)\n                                  (assoc! ret (aget v i) (aget v (inc i))))\n                                (persistent! ret))))\n                   \"with-meta\"\n                          (fn [v] (with-meta (aget v 0) (aget v 1)))}\n                  (dissoc (:handlers opts) :default)))\n              :defaultHandler (-> opts :handlers :default)\n              :mapBuilder (MapBuilder.)\n              :arrayBuilder (VectorBuilder.)\n              :preferStrings false\n              :preferBuffers false}\n         (clj->js\n           (set/rename-keys\n             (dissoc opts :handlers)\n             {:array-builder  :arrayBuilder\n              :map-builder    :mapBuilder\n              :prefer-strings :preferStrings\n              :prefer-buffers :preferBuffers}))))))\n\n(defn read\n  \"Read a transit encoded string into ClojureScript values given a\n   transit reader.\"\n  [r str]\n  (.read r str))\n\n(deftype ^:no-doc KeywordHandler []\n  Object\n  (tag [_ v] \":\")\n  (rep [_ v] (.-fqn v))\n  (stringRep [_ v] (.-fqn v)))\n\n(deftype ^:no-doc SymbolHandler []\n  Object\n  (tag [_ v] \"$\")\n  (rep [_ v] (.-str v))\n  (stringRep [_ v] (.-str v)))\n\n(deftype ^:no-doc ListHandler []\n  Object\n  (tag [_ v] \"list\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc MapHandler []\n  Object\n  (tag [_ v] \"map\")\n  (rep [_ v] v)\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc SetHandler []\n  Object\n  (tag [_ v] \"set\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [v] nil))\n\n(deftype ^:no-doc VectorHandler []\n  Object\n  (tag [_ v] \"array\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      ret))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc UUIDHandler []\n  Object\n  (tag [_ v] \"u\")\n  (rep [_ v] (.-uuid v))\n  (stringRep [this v] (.rep this v)))\n\n(deftype ^:no-doc WithMeta [value meta])\n\n(deftype ^:no-doc WithMetaHandler []\n  Object\n  (tag [_ v] \"with-meta\")\n  (rep [_ v]\n    (t/tagged \"array\" #js [(.-value v) (.-meta v)]))\n  (stringRep [_ v] nil))\n\n(defn writer\n  \"Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map with the following optional keys:\n\n    :handlers  - a map of type constructors to handler instances. Can optionally\n                 provide a :default write handler which will be used if no\n                 matching handler can be found.\n    :transform - a function of one argument returning a transformed value. Will\n                 be invoked on a value before it is written.\"\n  ([type] (writer type nil))\n  ([type opts]\n     (let [keyword-handler (KeywordHandler.)\n           symbol-handler  (SymbolHandler.)\n           list-handler    (ListHandler.)\n           map-handler     (MapHandler.)\n           set-handler     (SetHandler.)\n           vector-handler  (VectorHandler.)\n           uuid-handler    (UUIDHandler.)\n           meta-handler    (WithMetaHandler.)\n           handlers\n           (merge\n             {cljs.core/Keyword               keyword-handler\n              cljs.core/Symbol                symbol-handler\n              cljs.core/Range                 list-handler\n              cljs.core/List                  list-handler\n              cljs.core/Cons                  list-handler\n              cljs.core/EmptyList             list-handler\n              cljs.core/LazySeq               list-handler\n              cljs.core/RSeq                  list-handler\n              cljs.core/IndexedSeq            list-handler\n              cljs.core/ChunkedCons           list-handler\n              cljs.core/ChunkedSeq            list-handler\n              cljs.core/PersistentQueueSeq    list-handler\n              cljs.core/PersistentQueue       list-handler\n              cljs.core/PersistentArrayMapSeq list-handler\n              cljs.core/PersistentTreeMapSeq  list-handler\n              cljs.core/NodeSeq               list-handler\n              cljs.core/ArrayNodeSeq          list-handler\n              cljs.core/KeySeq                list-handler\n              cljs.core/ValSeq                list-handler\n              cljs.core/PersistentArrayMap    map-handler\n              cljs.core/PersistentHashMap     map-handler\n              cljs.core/PersistentTreeMap     map-handler\n              cljs.core/PersistentHashSet     set-handler\n              cljs.core/PersistentTreeSet     set-handler\n              cljs.core/PersistentVector      vector-handler\n              cljs.core/Subvec                vector-handler\n              cljs.core/UUID                  uuid-handler\n              cljs.core/BlackNode             vector-handler\n              cljs.core/RedNode               vector-handler\n              WithMeta                        meta-handler}\n             (when (exists? cljs.core/Eduction)\n               {^:cljs.analyzer/no-resolve cljs.core/Eduction list-handler})\n             (when (exists? cljs.core/Repeat)\n               {^:cljs.analyzer/no-resolve cljs.core/Repeat list-handler})\n             (when (exists? cljs.core/MapEntry)\n               {^:cljs.analyzer/no-resolve cljs.core/MapEntry vector-handler})\n             (:handlers opts))]\n      (t/writer (name type)\n        (opts-merge\n          #js {:objectBuilder\n               (fn [m kfn vfn]\n                 (reduce-kv\n                   (fn [obj k v]\n                     (doto obj (.push (kfn k) (vfn v))))\n                   #js [\"^ \"] m))\n               :handlers\n               (specify handlers\n                 Object\n                 (forEach\n                   ([coll f]\n                    (doseq [[k v] coll]\n                      (if (= :default k)\n                        (f v \"default\")\n                        (f v k))))))\n               :unpack\n               (fn [x]\n                 (if (instance? cljs.core/PersistentArrayMap x)\n                   (.-arr x)\n                   false))}\n          (clj->js (dissoc opts :handlers)))))))\n\n(defn write\n  \"Encode an object into a transit string given a transit writer.\"\n  [w o]\n  (.write w o))\n\n(defn read-handler\n  \"Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj\"\n  [from-rep]\n  from-rep)\n\n(defn- fn-or-val\n  [f]\n  (if (fn? f) f (constantly f)))\n\n(defn write-handler\n  \"Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.\"\n  ([tag-fn rep-fn]\n     (write-handler tag-fn rep-fn nil nil))\n  ([tag-fn rep-fn str-rep-fn]\n     (write-handler tag-fn rep-fn str-rep-fn nil))\n  ([tag-fn rep-fn str-rep-fn verbose-handler-fn]\n   (let [tag-fn (fn-or-val tag-fn)\n         rep-fn (fn-or-val rep-fn)\n         str-rep-fn (fn-or-val str-rep-fn)\n         verbose-handler-fn (fn-or-val verbose-handler-fn)]\n     (reify\n       Object\n       (tag [_ o] (tag-fn o))\n       (rep [_ o] (rep-fn o))\n       (stringRep [_ o] (when str-rep-fn (str-rep-fn o)))\n       (getVerboseHandler [_] (when verbose-handler-fn (verbose-handler-fn)))))))\n\n;; =============================================================================\n;; Constructors & Predicates\n\n(defn tagged-value\n  \"Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.\"\n  [tag rep]\n  (ty/taggedValue tag rep))\n\n(defn tagged-value?\n  \"Returns true if x is a transit tagged value, false otherwise.\"\n  [x]\n  (ty/isTaggedValue x))\n\n(defn integer\n  \"Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.\"\n  [s]\n  (ty/intValue s))\n\n(defn integer?\n  \"Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.\"\n  [x]\n  (ty/isInteger x))\n\n(defn bigint\n  \"Construct a big integer from a string.\"\n  [s]\n  (ty/bigInteger s))\n\n(defn bigint?\n  \"Returns true if x is a transit big integer value, false otherwise.\"\n  [x]\n  (ty/isBigInteger x))\n\n(defn bigdec\n  \"Construct a big decimal from a string.\"\n  [s]\n  (ty/bigDecimalValue s))\n\n(defn bigdec?\n  \"Returns true if x is a transit big decimal value, false otherwise.\"\n  [x]\n  (ty/isBigDecimal x))\n\n(defn uri\n  \"Construct a URI from a string.\"\n  [s]\n  (ty/uri s))\n\n(defn uri?\n  \"Returns true if x is a transit URI value, false otherwise.\"\n  [x]\n  (ty/isURI x))\n\n(defn uuid\n  \"Construct a UUID from a string.\"\n  [s]\n  (ty/uuid s))\n\n(defn uuid?\n  \"Returns true if x is a transit UUID value, false otherwise.\"\n  [x]\n  (or (ty/isUUID x) (instance? UUID x)))\n\n(defn binary\n  \"Construct a transit binary value. s should be base64 encoded\n   string.\"\n  [s]\n  (ty/binary s))\n\n(defn binary?\n  \"Returns true if x is a transit binary value, false otherwise.\"\n  [x]\n  (ty/isBinary x))\n\n(defn quoted\n  \"Construct a quoted transit value. x should be a transit\n   encodeable value.\"\n  [x]\n  (ty/quoted x))\n\n(defn quoted?\n  \"Returns true if x is a transit quoted value, false otherwise.\"\n  [x]\n  (ty/isQuoted x))\n\n(defn link\n  \"Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.\"\n  [x]\n  (ty/link x))\n\n(defn link?\n  \"Returns true if x a transit link value, false if otherwise.\"\n  [x]\n  (ty/isLink x))\n\n(defn write-meta\n  \"For :transform. Will write any metadata present on the value.\"\n  [x]\n  (if (implements? IMeta x)\n    (let [m (-meta ^not-native x)]\n      (if-not (nil? m)\n        (WithMeta. (-with-meta ^not-native x nil) m)\n        x))\n    x))\n"]}