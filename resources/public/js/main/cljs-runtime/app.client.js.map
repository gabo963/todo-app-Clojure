{"version":3,"sources":["app/client.cljs"],"mappings":"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","names":["app.client/todo-text-changed","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__51476","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__51478","map__51479","*after-render*-orig-val__51481","com.fulcrologic.fulcro.raw.components/*after-render*","*after-render*-temp-val__51482","env","*after-render*-orig-val__51483","*after-render*-temp-val__51484","temp__5804__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","id","text","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","app.client/todo-done-changed","map__51485","p__51487","map__51488","*after-render*-orig-val__51490","*after-render*-temp-val__51491","*after-render*-orig-val__51492","*after-render*-temp-val__51493","done","app.client/dissoc-in","map","keys","value","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","app.client/todo-deleted","map__51494","p__51496","map__51497","*after-render*-orig-val__51499","*after-render*-temp-val__51500","*after-render*-orig-val__51501","*after-render*-temp-val__51502","options__46506__auto__","_","props","params","com.fulcrologic.fulcro.components/make-state-map","com.fulcrologic.fulcro.components/wrapped-render","map__51504","com.fulcrologic.fulcro.components/props","js/app","js/app.client","js/app.client.Todo","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","app.client/Todo","this","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","G__51506","cljs.core/not","com.fulcrologic.fulcro.dom/macro-create-element*","p1__51503#","G__51507","com.fulcrologic.fulcro.dom.events/target-value","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3","G__51508","app.client/ui-todo","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","map__51509","js/app.client.Person","app.client/Person","name","todos","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.components/force-children","cljs.core.map.cljs$core$IFn$_invoke$arity$2","app.client/ui-person","p__51511","map__51512","map__51514","js/app.client.PersonList","app.client/PersonList","people","app.client/ui-person-list","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","map__51516","js/app.client.Root","app.client/Root","list","js/app.client.APP","app.client/APP","com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$0","app.client/init","com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns app.client\n  (:require\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom :refer [div ul li h1 h2 h3 h4 button input label i s]]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.dom.events :as evt]\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [com.fulcrologic.fulcro.algorithms.data-targeting :as targeting]))\n\n(defmutation todo-text-changed [{:todo/keys [id text]}]\n  (action [{:keys [state]}]\n    (swap! state assoc-in [:todo/id id :todo/text] text)\n  )\n)\n\n(defmutation todo-done-changed [{:todo/keys [id done]}]\n  (action [{:keys [state]}]\n    (swap! state assoc-in [:todo/id id :todo/done] done)\n  )\n)\n\n(defn dissoc-in [map keys value]\n  (update-in map keys dissoc value)\n)\n\n(defmutation todo-deleted [{:todo/keys [id]}]\n  (action [{:keys [state]}]\n    (swap! state dissoc-in [:todo/id] id)\n  )\n)\n\n(defsc Todo [this {:todo/keys [id done text] :as props}]\n  {:query [:todo/id :todo/done :todo/text]\n   :ident :todo/id\n   :initial-state {:todo/id :param/id\n                   :todo/done false\n                   :todo/text \"\"}}\n  (div :.ui.grid\n    (div :.column\n      (input {:type \"checkbox\" :name id :checked done\n      :onChange #(comp/transact! this [(todo-done-changed {:todo/id id :todo/done (not done)})])}\n      )\n      (label \"\")\n    )\n    (if done\n      (div :.ui.disabled.input.ten.wide.column\n        (input :.w-full {:type \"text\" :value text :style {:text-decoration \"line-through\"}})\n        )\n      (div :.ui.input.ten.wide.column\n        (input :.w-full {:type \"text\" :value text :placeholder \"Write Something\"\n        :onChange #(comp/transact! this [(todo-text-changed {:todo/id id :todo/text (evt/target-value %)})])})\n        )\n      )\n    (div :.two.wide.column.fluid\n      (button :.ui.icon.button {\n        :onClick #(comp/transact! this [(todo-deleted {:todo/id id})] {:refresh [:person/todos]} )} \"\"\n        (i :.x.icon)\n        )\n      )\n    ))\n\n(def ui-todo (comp/factory Todo {:keyfn :todo/id}))\n\n(defsc Person [this {:person/keys [id name  todos] :as props}]\n  {:query [:person/id :person/name {:person/todos (comp/get-query Todo)}]\n   :ident :person/id\n   :initial-state {:person/id :param/id\n                   :person/name :param/name\n                   :person/todos [{:id 1}\n                                 {:id 2 }\n                                 {:id 3}]}}\n  (div :.ui.segment {}\n    (h2 name \"'s Todos\")\n    (h2 \"Todos:\")\n    (ul (map ui-todo todos)))\n  )\n\n(def ui-person (comp/factory Person {:keyfn :person/id}))\n\n(defsc PersonList [this { :person-list/keys [people]}]\n  {:query [{:person-list/people (comp/get-query Person)}]\n   :ident (fn [] [:component/id ::person-list])\n   :initial-state {:person-list/people [{:id 1 :name \"Daniel\"}]}}\n  (div\n    (ul (map ui-person people))\n  ))\n\n(def ui-person-list (comp/factory PersonList))\n\n(defsc Root [this {:root/keys [list]}]\n  {:query [{:root/list (comp/get-query PersonList)}]\n   :initial-state {:root/list {}}}\n  (div :.ui.segment{}\n  (h1 \"Todo List\")\n    (if list\n      (div\n           (ui-person-list list))\n      (h3 \"Loading...\"))))\n\n(defonce APP (app/fulcro-app))\n\n(defn ^:export init []\n  (app/mount! APP Root \"app\"))\n\n(comment\n\n  (comp/get-query PersonList)\n  (comp/get-initial-state Sample)\n  (reset! (::app/state-atom APP) {})\n\n  (app/current-state APP)\n\n  (app/schedule-render! APP)\n\n  )\n\n\n"]}