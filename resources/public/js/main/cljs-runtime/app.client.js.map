{"version":3,"sources":["app/client.cljs"],"mappings":";AAUA,AAAA,AAAA;AAAA,IAAAA,+BAAA,2CAAA,wDAAA,iCAAac;AAAb,AAAA,0FAAA,2CAAA,0EACsC,AAACE,0EAAeC;GADtD,wEAAA,+CAAAhB;AAAA,AAAA,OAAAC,iDAAA,2CAAA,0EAAA,2CAAA,2CAAA,4HAAAD,lDACsDgB;GADtD,0DAAA,iCAAaH;AAAb,AAAA,OAAAX,uDAAA,NAAaW;AAAb,AAAA,IAAAV,aAAA,CAAAC,wEAAAA,+EAAAA,TAAaS,2DAAAA;IAAbV,iBAAA,AAAAE,4BAAAF;kBAAA,AAAAG,4CAAAH,eAAA,zEAA+BW;AAA/B,AAGE,OAAAG,sDAAA,CAAA,MAAA,eAAA,eAAA,AAAAC,6HAAA,AAAAA,5EACE,AAAAD,sDAAA,CAAA,KAAA,KAAA,4DACA,kBAAIH,aACF,CAACK,8EAAAA,2FAAAA,fAAmCL,uEAAAA,cACpC,AAAAG,sDAAA,CAAA,KAAA,KAAA;;;AAPN,AAAA,GAAA,QAAAV,gCAAAC,uCAAAC;AAAA;AAAA,AAAA;;;kBAAA,AAAAC,oDAAA,AAAAJ,4CAAAP,6BAAA,/IAAOa;;;AAAP,AAAAD,4EAAA,wEAAAZ,xFAAOa;AASP,4BAAA,5BAAOQ,gEAAgBC;AAAvB,AACE,0FAAA,oGAAA,2CAAA,wDAAA,mFAAA,iEAAA,oHAAA,liBAACC,2EAASD,uEAAeE;;AAI3B,uBAAA,2CAAA,lEAAKC,4HACM,iEAAA,jEAACC;AAEZ,GAAA,QAAAlB,gCAAAC,uCAAAkB;AAAA;AAAA,AAAA,AAASC,iBAAI,4EAAA,2CAAA,gFAAA,vMAACC,kLAAkCJ,kGACAJ;;AAChD,kBAAA,lBAAeS;AAAf,AACE,mHAAA,5GAACC,6EAAWH,eAAIf","names":["options__48138__auto__","params","com.fulcrologic.fulcro.components/make-state-map","com.fulcrologic.fulcro.components/wrapped-render","map__51716","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","js/app","js/app.client","js/app.client.Root","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","app.client/Root","this","list-picker","com.fulcrologic.fulcro.components.get_query","app.components.ui-lists-picker/ListPicker","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","app.components.ui-lists-picker/ui-list-picker","app.client/initialLoading","app","com.fulcrologic.fulcro.data_fetch.load_BANG_","app.components.ui-list-item/ListItem","app.client/remoteMAp","com.fulcrologic.fulcro.networking.http-remote/fulcro-http-remote","js/app.client.APP","app.client/APP","com.fulcrologic.fulcro.application.fulcro_app","app.client/init","com.fulcrologic.fulcro.application.mount_BANG_"],"sourcesContent":["(ns app.client\n  (:require\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.dom :refer [div ul li h1 h2 h3 h4 button input label i s]]\n    [com.fulcrologic.fulcro.networking.http-remote :as http]\n    [app.components.ui-lists-picker :as ui-picker-component]\n    [app.components.ui-list-item :as ui-list-item-component]))\n\n(defsc Root [this {:root/keys [list-picker]}]\n  {:query         [{:root/list-picker (comp/get-query ui-picker-component/ListPicker)}]\n   :initial-state {:root/list-picker {}}}\n  (div :.ui.segment {}\n    (h1 \"To-Do\")\n    (if list-picker\n      (ui-picker-component/ui-list-picker list-picker)\n      (h1 \"Loading...\"))))\n\n(defn- initialLoading [app]\n  (df/load! app :all-lists ui-list-item-component/ListItem\n    {:target [:component/id :app.components.ui-list-list/list-list :list-list/list]})\n  )\n\n(def remoteMAp\n  {:remote (http/fulcro-http-remote {})})\n\n(defonce APP (app/fulcro-app {:remotes          remoteMAp\n                              :client-did-mount initialLoading}))\n(defn ^:export init []\n  (app/mount! APP Root \"app\"))\n"]}