{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/indexing.cljc"],"mappings":"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","names":["p__55329","map__55330","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.indexing/index-query*","prop->classes","parent-component","parent-children","ast","parent-key","com.fulcrologic.fulcro.raw.components/class->registry-key","cljs.core/seq","update-index","idx","k","c","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__55332","map__55333","key","dispatch-key","children","child-ast","G__55335","cljs.core/vector?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/Keyword","com.fulcrologic.fulcro.algorithms.indexing/index-query","query","edn-query-language.core/query->ast","com.fulcrologic.fulcro.algorithms.indexing/top-level-keys","map__55338","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core/keyword?","p__55340","map__55341","com.fulcrologic.fulcro.algorithms.indexing/link-query-props","com.fulcrologic.fulcro.algorithms.denormalize/link-ref?","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","clojure.set/union","cljs.core/first","cljs.core.map.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.indexing/index-root!","app","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11","taoensso.timbre/*config*","cljs.core/Delay","map__55345","map__55346","cljs.core/deref","state-atom","runtime-atom","root-class","state-map","root-query","com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2","idents-in-joins","edn-query-language.core/ident?","cljs.core/keys","root-props","linked-props","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","s","cljs.core/assoc-in","com.fulcrologic.fulcro.algorithms.indexing/index-component*","runtime-state","instance","ident","cls","G__55358","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","com.fulcrologic.fulcro.algorithms.indexing/index-component!","this","map__55359","com.fulcrologic.fulcro.raw.components/any->app","get-ident","com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.raw.components/component-type","props","com.fulcrologic.fulcro.raw.components/props","js/goog.DEBUG","and__4120__auto__","com.fulcrologic.fulcro.raw.components/component-name","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.algorithms.indexing/drop-component*","G__55369","cljs.core/disj","var_args","G__55373","com.fulcrologic.fulcro.algorithms.indexing/drop-component!","js/Error","map__55375","old-ident","com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.algorithms.indexing.drop_component_BANG_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.indexing/reindex","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","p__55381","map__55382","*after-render*-orig-val__55385","com.fulcrologic.fulcro.raw.components/*after-render*","*after-render*-temp-val__55387","env","*after-render*-orig-val__55389","*after-render*-temp-val__55390","temp__5804__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","_"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.indexing\n  \"Functions that implement the query and component indexing. Fulcro keeps indexes of on-screen\n   components by ident and class. These enable Fulcro to find on-screen components for things\n   like targeted refresh. You are allowed to use the indexes to find components for whatever\n   purpose suits your needs (e.g. looking at component options).\"\n  (:require\n    [com.fulcrologic.fulcro.raw.components :as rc]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as util]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [com.fulcrologic.guardrails.core :as gw :refer [>defn]]\n    [clojure.set :as set]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as encore]\n    [taoensso.timbre :as log]))\n\n(defn- index-query*\n  [prop->classes {parent-component :component\n                  parent-children  :children\n                  :as              ast}]\n  (let [parent-key      (rc/class->registry-key parent-component)\n        parent-children (seq parent-children)\n        update-index    (fn [idx k c] (update idx k (fnil conj #{}) c))]\n    (if parent-children\n      (reduce\n        (fn [idx {:keys [key dispatch-key children] :as child-ast}]\n          (cond-> idx\n            (and (vector? key) (= '_ (second key))) (update-index dispatch-key parent-key)\n            (and (vector? key) (not= '_ (second key))) (update-index key parent-key)\n            (keyword? key) (update-index key parent-key)\n            (seq children) (index-query* child-ast)))\n        prop->classes\n        parent-children)\n      prop->classes)))\n\n(defn index-query\n  \"Create an index of the given component-annotated query. Returns a map from query keyword to the component\n  class(es) that query for that keyword.\"\n  [query]\n  (let [ast (eql/query->ast query)]\n    (index-query* {} ast)))\n\n(defn top-level-keys\n  \"Return a set of keywords that are in the top-level of the given AST\"\n  [ast]\n  (let [{:keys [children]} ast]\n    (into #{} (comp (map :key) (filter keyword?)) children)))\n\n(defn link-query-props\n  \"Returns a set of all of the keys that appear in link refs `[:k '_]` in the entire ast.\"\n  [{:keys [key children] :as ast}]\n  (cond\n    (fdn/link-ref? key) (apply set/union #{(first key)} (map link-query-props children))\n    (seq children) (apply set/union (map link-query-props children))\n    :otherwise #{}))\n\n(defn index-root!\n  \"Index the root query (see index-query) and side-effect the result (`prop->classes`) into the given app.\n  This function assumes the `root-class` has already been supplied to the app (i.e. is has been mounted).\"\n  [app]\n  (log/debug \"(Re)indexing application query for prop->classes\")\n  (let [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [root-class]} @runtime-atom\n        state-map       @state-atom\n        root-query      (rc/get-query root-class state-map)\n        ast             (eql/query->ast root-query)\n        prop->classes   (index-query root-query)\n        idents-in-joins (into #{} (filter eql/ident?) (keys prop->classes))\n        root-props      (top-level-keys ast)\n        linked-props    (link-query-props ast)]\n    (swap! runtime-atom (fn [s]\n                          (-> s\n                            (assoc-in [:com.fulcrologic.fulcro.application/indexes :root-props] root-props)\n                            (assoc-in [:com.fulcrologic.fulcro.application/indexes :linked-props] linked-props)\n                            (assoc-in [:com.fulcrologic.fulcro.application/indexes :idents-in-joins] idents-in-joins)\n                            (assoc-in [:com.fulcrologic.fulcro.application/indexes :prop->classes] prop->classes))))))\n\n(defn- index-component* [runtime-state instance ident cls]\n  (let [k (rc/class->registry-key cls)]\n    (cond-> runtime-state\n      k (update-in\n          [:com.fulcrologic.fulcro.application/indexes :class->components k]\n          (fnil conj #{})\n          instance)\n      ident (update-in\n              [:com.fulcrologic.fulcro.application/indexes :ident->components ident]\n              (fnil conj #{})\n              instance))))\n\n(defn index-component!\n  \"Add a component instance to the app index. This adds the component to the `class->components` and\n   `ident->components` indexes.\"\n  [this]\n  (let [{:keys [:com.fulcrologic.fulcro.application/runtime-atom]} (rc/any->app this)\n        get-ident (rc/component-options this :ident)]\n    (let [cls   (rc/component-type this)\n          props (rc/props this)\n          ident (when get-ident (get-ident this props))]\n      (when #?(:cljs goog.DEBUG :clj true)\n        (when (and ident (not (eql/ident? ident)))\n          (log/error \"Component\" (rc/component-name this) \"supplied an invalid ident\" ident \"using props\" props \"See https://book.fulcrologic.com/#err-idx-invalid-ident\"))\n        (when (and ident (nil? (second ident)))\n          (log/info\n            (str \"component \" (rc/component-name this) \"'s ident (\" ident \") has a `nil` second element.\"\n              \" This warning can be safely ignored if that is intended.\") \"Props were\" props)))\n      (swap! runtime-atom index-component* this ident cls))))\n\n(defn- drop-component*\n  [runtime-state instance ident cls]\n  (let [k (rc/class->registry-key cls)]\n    (cond-> (update-in runtime-state [:com.fulcrologic.fulcro.application/indexes :class->components k]\n              disj instance)\n      ident (update-in\n              [:com.fulcrologic.fulcro.application/indexes :ident->components ident]\n              disj\n              instance))))\n\n(defn drop-component!\n  \"Remove the component instance from the indexes. If ident is supplied it uses that, otherwise it gets the\n  ident from the component itself.\"\n  ([this ident]\n   (let [{:keys [:com.fulcrologic.fulcro.application/runtime-atom]} (rc/any->app this)\n         cls (rc/component-type this)]\n     (when (and #?(:cljs goog.DEBUG :clj true) ident)\n       (log/debug \"Dropping component from index\" (rc/component-name cls) ident))\n     (when ident\n       (swap! runtime-atom drop-component* this ident cls))))\n  ([this]\n   (let [old-ident (rc/get-ident this)]\n     (drop-component! this old-ident))))\n\n(defmutation reindex\n  \"Mutation: re-index the application (typically after a dynamic query change).\"\n  [_]\n  (action [{:keys [app]}]\n    (if app\n      (index-root! app)\n      (log/error \"Unable to re-index root. App was not set in the mutation env. See https://book.fulcrologic.com/#err-idx-missing-app\"))))\n"]}